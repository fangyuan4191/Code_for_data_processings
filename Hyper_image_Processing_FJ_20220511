{"cells":[{"cell_type":"code","execution_count":1,"id":"8938c779","metadata":{"id":"8938c779","executionInfo":{"status":"ok","timestamp":1652300936846,"user_tz":420,"elapsed":2085,"user":{"displayName":"Fangyuan Jiang","userId":"09141426764557996192"}}},"outputs":[],"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import os\n","from scipy.signal import savgol_filter\n","from numpy.core.function_base import linspace\n","from scipy.interpolate import InterpolatedUnivariateSpline\n","import statistics\n","import math\n","import h5py    #### The package used for creating and manipulating HDF5 files\n","import plotly   ###\n","import pandas as pd\n"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nGdAFSzxOI5w","executionInfo":{"status":"ok","timestamp":1652300956337,"user_tz":420,"elapsed":17891,"user":{"displayName":"Fangyuan Jiang","userId":"09141426764557996192"}},"outputId":"a64956f0-9d8c-4fb0-b80e-0cbef3334654"},"id":"nGdAFSzxOI5w","execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":null,"id":"55e853ad","metadata":{"id":"55e853ad"},"outputs":[],"source":["# !pip install h5py\n","# !pip install mpldatacursor\n","# !pip install plotly==5.5.0"]},{"cell_type":"code","execution_count":3,"id":"95d1a881","metadata":{"id":"95d1a881","executionInfo":{"status":"ok","timestamp":1652300959829,"user_tz":420,"elapsed":169,"user":{"displayName":"Fangyuan Jiang","userId":"09141426764557996192"}}},"outputs":[],"source":["#@title 1- Costumize modules\n","def get_hyper_image(h5_data):\n","  ''' \n","  input: hyperspectal data taken from Photon etc hyperspectral microscopy\n","  data should be .h5 format\n","\n","  output:numpy array of hyperspectral image in a form of [width, height, wavenumber]\n","  ''' \n","  hf = h5py.File(h5_data, 'r')\n","  hf_im=np.array(hf['Cube']['Images'])\n","  hf_im=np.transpose(hf_im)\n","  hf_wl=np.array(hf['Cube']['Wavelength'])\n","\n","  return hf_im, hf_wl\n","\n"]},{"cell_type":"code","source":["###### to account for the detector responsivity\n","def data_correction(h5_data,cor_coef, wl_start,wl_stop,stepsize=2):      \n","  data_cor=np.zeros((h5_data.shape[0],h5_data.shape[1],h5_data.shape[2]))\n","  a_start =int((wl_start-600)/stepsize)\n","  a_stop=int(1+((wl_stop-600)/stepsize))\n","  cor_coef=cor_coef[a_start:a_stop]\n","  for x in range(data_cor.shape[0]):\n","      for y in range(data_cor.shape[1]):\n","          data_cor[x,y,:]=h5_data[x,y,:]*cor_coef    \n","          \n","  return data_cor "],"metadata":{"id":"eFWWBOB8rvxl","executionInfo":{"status":"ok","timestamp":1652300980526,"user_tz":420,"elapsed":145,"user":{"displayName":"Fangyuan Jiang","userId":"09141426764557996192"}}},"id":"eFWWBOB8rvxl","execution_count":4,"outputs":[]},{"cell_type":"code","source":["###### to calculate peak position and FWHM\n","def lin_interp(x, y, i, half):\n","    return x[i] + (x[i+1] - x[i]) * ((half - y[i]) / (y[i+1] - y[i]))   ##### \n","def half_max_x(x, y):\n","    half = max(y)/2.0\n","    signs = np.sign(np.add(y, -half))\n","    # print(signs)\n","    zero_crossings = (signs[0:-2] != signs[1:-1])\n","    # print(zero_crossings)\n","    zero_crossings_i = np.where(zero_crossings)[0]\n","    return [lin_interp(x, y, zero_crossings_i[0], half),\n","            lin_interp(x, y, zero_crossings_i[1], half)]\n","            \n","\n","def peak_fwhm_mapping(h5_data,wave,smoothing=True):\n","  '''\n","  Input\n","  h5_data: array of hyper image\n","  wave: array of wavelength\n","  smoothing: Boolean(True or False) If True, apply a Savitzky-Golay filter.\n","  Output\n","  max_peak_image:image array of max peak position\n","  fwhm_image:image array of full width half maximum at max intensity\n","   '''\n","  \n","  fwhm_image=np.zeros((h5_data.shape[0],h5_data.shape[1]))\n","  max_peak_image=np.zeros((h5_data.shape[0],h5_data.shape[1]))\n","  for x in range(fwhm_image.shape[0]):\n","      for y in range(fwhm_image.shape[1]):\n","          spec=h5_data[x,y,:]\n","          if smoothing ==True:\n","            spec = savgol_filter(h5_data[x,y,:], 5, 1)\n","          #max peak position\n","          wave_max=int(wave[np.argmax(spec)])\n","          max_peak_image[x,y]=wave_max\n","          #full width half max calculation\n","          hmx = half_max_x(wave,spec)\n","          fwhm = int(hmx[1] - hmx[0])\n","          fwhm_image[x,y] = fwhm\n","  return max_peak_image,fwhm_image   \n"],"metadata":{"id":"BSX9dUW1Yk99","executionInfo":{"status":"ok","timestamp":1652301020588,"user_tz":420,"elapsed":171,"user":{"displayName":"Fangyuan Jiang","userId":"09141426764557996192"}}},"id":"BSX9dUW1Yk99","execution_count":5,"outputs":[]},{"cell_type":"code","source":["file_directory_cor=''   #### load your correction file to account for the detector responsivity"],"metadata":{"id":"WgSbeaZXO25q","executionInfo":{"status":"ok","timestamp":1652301035045,"user_tz":420,"elapsed":160,"user":{"displayName":"Fangyuan Jiang","userId":"09141426764557996192"}}},"id":"WgSbeaZXO25q","execution_count":6,"outputs":[]},{"cell_type":"markdown","source":[""],"metadata":{"id":"4GVHFRvIuchc"},"id":"4GVHFRvIuchc"},{"cell_type":"code","source":["file_directory_1=''   #### load your own data that you would like to process"],"metadata":{"id":"jv4CrbyzbzI0","executionInfo":{"status":"ok","timestamp":1652301154454,"user_tz":420,"elapsed":135,"user":{"displayName":"Fangyuan Jiang","userId":"09141426764557996192"}}},"id":"jv4CrbyzbzI0","execution_count":8,"outputs":[]},{"cell_type":"code","source":["image_1, wavelength_1=get_hyper_image(file_directory_1)   ### read out your own data"],"metadata":{"id":"eMtzUlj2QRZO","executionInfo":{"status":"error","timestamp":1652301156254,"user_tz":420,"elapsed":194,"user":{"displayName":"Fangyuan Jiang","userId":"09141426764557996192"}},"colab":{"base_uri":"https://localhost:8080/","height":415},"outputId":"88c096e5-1a86-47da-bb0f-2ed80b3c6dcf"},"id":"eMtzUlj2QRZO","execution_count":9,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-eea33c769bd5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mimage_1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwavelength_1\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mget_hyper_image\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_directory_1\u001b[0m\u001b[0;34m)\u001b[0m   \u001b[0;31m### read out your own data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-3-20e24bd3a6db>\u001b[0m in \u001b[0;36mget_hyper_image\u001b[0;34m(h5_data)\u001b[0m\n\u001b[1;32m      7\u001b[0m   \u001b[0moutput\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mnumpy\u001b[0m \u001b[0marray\u001b[0m \u001b[0mof\u001b[0m \u001b[0mhyperspectral\u001b[0m \u001b[0mimage\u001b[0m \u001b[0;32min\u001b[0m \u001b[0ma\u001b[0m \u001b[0mform\u001b[0m \u001b[0mof\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mwidth\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwavenumber\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m   ''' \n\u001b[0;32m----> 9\u001b[0;31m   \u001b[0mhf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh5py\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mh5_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'r'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m   \u001b[0mhf_im\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Cube'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Images'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m   \u001b[0mhf_im\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtranspose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhf_im\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/h5py/_hl/files.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, **kwds)\u001b[0m\n\u001b[1;32m    425\u001b[0m                                fapl, fcpl=make_fcpl(track_order=track_order, fs_strategy=fs_strategy,\n\u001b[1;32m    426\u001b[0m                                fs_persist=fs_persist, fs_threshold=fs_threshold),\n\u001b[0;32m--> 427\u001b[0;31m                                swmr=swmr)\n\u001b[0m\u001b[1;32m    428\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    429\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlibver\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/h5py/_hl/files.py\u001b[0m in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    188\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mswmr\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mswmr_support\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    189\u001b[0m             \u001b[0mflags\u001b[0m \u001b[0;34m|=\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mACC_SWMR_READ\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 190\u001b[0;31m         \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfapl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfapl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    191\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mmode\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'r+'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    192\u001b[0m         \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mACC_RDWR\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfapl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfapl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mh5py/_objects.pyx\u001b[0m in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n","\u001b[0;32mh5py/_objects.pyx\u001b[0m in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n","\u001b[0;32mh5py/h5f.pyx\u001b[0m in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Invalid file name (invalid file name)"]}]},{"cell_type":"code","source":["#### inteprete the correction file with any customized stepsize\n","\n","cor_file = np.genfromtxt(file_directory_cor, delimiter='\\t') #### load correction file\n","plt.plot(cor_file[:,0], cor_file[:,2])\n","\n","xdata=cor_file[2:,0]    ### wavelenth\n","ydata=cor_file[2:,2]    #### correction coefficient\n","\n","xs = np.linspace(600,1000, 201)  #### define the stepsize as 2   #### can also change to any other stepsizes too\n","spl = InterpolatedUnivariateSpline(xdata, ydata)   #### fitting the data\n","correction=[xs, spl(xs)]\n","wavelength=correction[0]\n","cor_coefficient = correction[1]"],"metadata":{"id":"-cIUWfzAO2m7","executionInfo":{"status":"ok","timestamp":1652301219226,"user_tz":420,"elapsed":393,"user":{"displayName":"Fangyuan Jiang","userId":"09141426764557996192"}},"colab":{"base_uri":"https://localhost:8080/","height":265},"outputId":"a9b939ce-9d00-42e7-8898-b487a3340f3d"},"id":"-cIUWfzAO2m7","execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["###### to account for the detector responsivity\n","def data_correction(h5_data,cor_coef, wl_start,wl_stop,stepsize=2):      \n","  data_cor=np.zeros((h5_data.shape[0],h5_data.shape[1],h5_data.shape[2]))\n","  a_start =int((wl_start-600)/stepsize)\n","  a_stop=int(1+((wl_stop-600)/stepsize))\n","  cor_coef=cor_coef[a_start:a_stop]\n","  for x in range(data_cor.shape[0]):\n","      for y in range(data_cor.shape[1]):\n","          data_cor[x,y,:]=h5_data[x,y,:]*cor_coef    \n","          \n","  return data_cor  "],"metadata":{"id":"aRmPggrHaH3E","executionInfo":{"status":"ok","timestamp":1652301224353,"user_tz":420,"elapsed":140,"user":{"displayName":"Fangyuan Jiang","userId":"09141426764557996192"}}},"id":"aRmPggrHaH3E","execution_count":12,"outputs":[]},{"cell_type":"code","source":["data_cor1=data_correction(image_1,cor_coefficient, 720, 900,)    ##### data_correction(h5_data,wave_cor,wl_start,wl_stop,stepsize=2)"],"metadata":{"id":"FY3xng08bvSx"},"id":"FY3xng08bvSx","execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_cor11 = data_cor1[100:900,300:1100,:]  ### select the range of the pixels that you want to look at"],"metadata":{"id":"FW-TyLJT9r49"},"id":"FW-TyLJT9r49","execution_count":null,"outputs":[]},{"cell_type":"code","source":["max_peak_image1,fwhm_image1 = peak_fwhm_mapping(data_cor11,wavelength_1,True)    #### read out peak position mapping and FWHM mapping"],"metadata":{"id":"G9U3QhuG-dg2","colab":{"base_uri":"https://localhost:8080/","height":165},"executionInfo":{"status":"error","timestamp":1652301265485,"user_tz":420,"elapsed":166,"user":{"displayName":"Fangyuan Jiang","userId":"09141426764557996192"}},"outputId":"1ed98a79-e235-4e48-f289-4b089269f444"},"id":"G9U3QhuG-dg2","execution_count":13,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-13-475464a80a03>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmax_peak_image1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mfwhm_image1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpeak_median_offset_image1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmedian_image1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpeak_fwhm_mapping\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_cor11\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mwavelength_1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m    \u001b[0;31m#### read out peak position mapping and FWHM mapping\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'data_cor11' is not defined"]}]},{"cell_type":"code","execution_count":null,"id":"4ba96550","metadata":{"id":"4ba96550"},"outputs":[],"source":["#### define some parameters for your image\n","pv=0.3225 ### um   ### for objective lens 20x\n","Nx=1392   ###  how many pixels in the x-axis\n","Ny=1040   ###  how many pixels in the y-axis\n","stepsize= 2  ### define your stepsize\n","start_wl = 720   ### which wavelength does your imaging start with\n","\n","length = data_cor11.shape[0]    \n","width = data_cor11.shape[1]\n","\n"]},{"cell_type":"markdown","source":[""],"metadata":{"id":"8jCMBc4Ugc_5"},"id":"8jCMBc4Ugc_5"},{"cell_type":"code","execution_count":14,"id":"319c07a8","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":235},"id":"319c07a8","executionInfo":{"status":"error","timestamp":1652305530291,"user_tz":420,"elapsed":373,"user":{"displayName":"Fangyuan Jiang","userId":"09141426764557996192"}},"outputId":"a5734f42-0904-4380-b7d4-09d46396f728"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-40d64efd6280>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#### plot PL intensity at PL peak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mmean_peak\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmax_peak_image1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;31m# print(mean_peak)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mwl_in\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmean_peak\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mstart_wl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mstepsize\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mdata_cor_intensity0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata_cor11\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mwl_in\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'max_peak_image1' is not defined"]}],"source":["#### plot PL intensity at PL peak\n","mean_peak = max_peak_image1.mean()\n","# print(mean_peak)\n","wl_in=int((mean_peak-start_wl)/stepsize)\n","data_cor_intensity0 = data_cor11[:,:,wl_in]\n","# plt.imshow(image[:,:,wl_in],extent=[0,image.shape[1]*pv,0,image.shape[0]*pv] )\n","plt.imshow(data_cor_intensity0, extent=[0,length*pv,0,width*pv])#,cmap=\"RdBu_r\")\n","cbar=plt.colorbar()\n","cbar.set_label('Integrated Counts', rotation=270, fontsize=15, labelpad=13)\n","cbar.ax.tick_params(labelsize=13)\n","plt.xlabel(\" Length ($ \\u03bcm $)\", fontsize=15)\n","plt.ylabel(\" Length ($ \\u03bcm $)\", fontsize=15)\n","plt.xticks(fontsize=14)\n","plt.yticks(fontsize=14)\n"]},{"cell_type":"code","source":["#### plot PL peak mapping\n","\n","plt.imshow(max_peak_image1, extent=[0,length*pv,0,width*pv])\n","cbar=plt.colorbar()\n","cbar.set_label('PL peak (nm)', rotation=270, fontsize=15, labelpad=13)\n","cbar.ax.tick_params(labelsize=13)\n","plt.xlabel(\" Length ($ \\u03bcm $)\", fontsize=15)\n","plt.ylabel(\" Length ($ \\u03bcm $)\", fontsize=15)\n","plt.xticks(fontsize=14)\n","plt.yticks(fontsize=14)\n","plt.clim(750,790)\n","plt.xlim(100,200)\n","plt.ylim(150,250)\n","\n","# plt.text(10, 90, 'lambda=790 nm (filmside)', color=\"white\", size=12)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"id":"glkTnboVPsZN","executionInfo":{"status":"error","timestamp":1648425209152,"user_tz":420,"elapsed":160,"user":{"displayName":"Fangyuan Jiang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09141426764557996192"}},"outputId":"2b6f78aa-db57-4892-99ff-887d20cb6f12"},"id":"glkTnboVPsZN","execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-20-58def94dbe7c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#### plot PL peak mapping\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# plt.imshow(max_peak_image1)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmax_peak_image1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;31m#, extent=[0,length*pv,0,width*pv])\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mcbar\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolorbar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mcbar\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_label\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'PL peak (nm)'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrotation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m270\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabelpad\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m13\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'max_peak_image1' is not defined"]}]},{"cell_type":"code","execution_count":null,"id":"480bef10","metadata":{"id":"480bef10"},"outputs":[],"source":["fig,ax=plt.subplots(figsize=(8,8))\n","\n","plt.plot(wavelength_1, data_cor11.mean(axis=(0,1))), linewidth = 3, color=\"red\", label=\"***\")\n","\n","plt.ylabel(\" Intentisty (a.u.)\", size=25)\n","plt.xticks(size=22)\n","plt.yticks(size= 22)\n","\n","plt.xlabel(\" Wavelength (nm)\", size=25)\n","plt.xlim([700, 850])\n","plt.legend(loc='upper left', labelspacing=0.4, handletextpad=0.4,fontsize=15)"]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.8"},"colab":{"name":"Hyper_image_Processing_FJ_20220511","provenance":[{"file_id":"19zRS4PjcTNUYYkPYDqyLGpyiOp9sqt-O","timestamp":1652300910635},{"file_id":"1SDYfY6egQPRcUPu4htaQncMmmDutydY_","timestamp":1649810864697},{"file_id":"1bVx_cI6rQRkSKYmdWvB55V50uWfdEUXG","timestamp":1644346412297}],"collapsed_sections":[]}},"nbformat":4,"nbformat_minor":5}